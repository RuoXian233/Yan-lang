require('dict')
var testFunctions = ['math.ceil', 'math.floor', 'math.comb', 'math.sum', 'math.imod', 'math.gcd']
var functionArgumentCount = [1, 1, 2, 1, 2, 2]
var func = Dict(testFunctions, for i = 0 to len(testFunctions) then import(testFunctions[i]))
var funcArgDict = Dict(testFunctions, functionArgumentCount)
var args = [[1.14, 1, 0, 23.32, -12.32, -1], [1.14, 1, 0, 23.32, -12.32, -1], [[1, 1], [2, 1], [3, 1], [3, 3]], [[1, 2, 3], [2, 5, 8]], [[2, 2], [3, 2], [100, 10], [49, 8]], [[1, 2], [3, 7], [4, 8]]]
var expectations = [[2, 1, 0, 24, -12, -1], [1, 1, 0, 23, -13, -1], [1, 2, 3, 1], [6, 15], [0, 1, 0, 1], [1, 1, 4]]
var funcParamDict = Dict(testFunctions, args)
var funcExpectationsDict = Dict(testFunctions, expectations)
var failedTests = []


function testFunction1(fn, fnValue, arg0, expectation)
    var result = fnValue(arg0)
    print('[' + fn + '(' + str(arg0) + ')' + '] = ' + str(result))
    if result == expectation then
        println(' (Succeeded)')
        return true
    else
        println(' (expect ' + str(expectation) + ', Failed)')
        return false
    end
end

function testFunction2(fn, fnValue, arg0, arg1, expectation)
    var result = fnValue(arg0, arg1)
    print('[' + fn + '(' + str(arg0) + ', ' + str(arg1) +  ')' + '] = ' + str(result))
    if result == expectation then
        println(' (Succeeded)')
        return true
    else
        println(' (expect ' + str(expectation) + ', Failed)')
        return false
    end
end


function main()
    var testResult = true
    for i = 0 to len(Dict_getKeys(func)) then
        var currentTestFunc = Dict_get(func, testFunctions[i])
        var arg = Dict_get(funcParamDict, testFunctions[i])
        var resultExpectation = Dict_get(funcExpectationsDict, testFunctions[i])
        println('Test #' + str(i + 1) + ':')
        if Dict_get(funcArgDict, testFunctions[i]) == 1 then
            for j = 0 to len(arg) then
                print('  .' + str(j + 1) + ': ')
                if not testFunction1(testFunctions[i], currentTestFunc, arg[j], resultExpectation[j]) then
                    var testResult = false
                    append(failedTests, '#' + str(i + 1) + '.' + str(j + 1))
                end
            end
        else
            for j = 0 to len(arg) then
                print('  .' + str(j + 1) + ': ')
                if not testFunction2(testFunctions[i], currentTestFunc, arg[j][0], arg[j][1], resultExpectation[j]) then
                    var testResult = false
                    append(failedTests, '#' + str(i + 1) + '.' + str(j + 1))
                end
            end
        end
    end
    return testResult
end

if not main() then
    println('\nSome test failed! :(')
    println('  Failed tests: ' + str(failedTests))
else
    println('All tests passed! :)')
end
