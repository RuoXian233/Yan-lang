var pi = 3.141592653589793238462
var e = 2.718281828459045


function factorial(n)
    if not isInteger(n) then
        panic('Argument \'n\' should be an integer')
    end
    if n < 0 then
        panic('Argument \'n\' should be positive')
    end
    
    var result = 1
    for i = 1 to n + 1 then
       var result = result * i
    end
    return result
end


function ceil(x)
    if isInteger(x) then
        return x
    end
    var expected = parseInt(str(x)) + 1
    if x < expected then
        return expected - (x < 0)
    else
        return x
    end
end


function floor(x)
    var expected = parseInt(str(x)) 
    if x > expected then
        if x < 0 then
            return expected - 1
        else
            return expected
        end
    elif x < 0 and x < expected then
        return expected - 1
    else
        return x
    end
end


function comb(n, k)
    if k > n then
        return 0
    else
        return factorial(n) / (factorial(k) * factorial(n - k))
    end
end


function sum(lst)
    var result = 0
    for i = 0 to len(lst) then
        var result = result + lst[i]
    end
    return result
end


function imod(x, y)
    if not isInteger(x) then
        panic('Argument \'x\' should be an integer')
    elif not isInteger(y) then
        panic('Argument \'y\' should be an integer')
    elif y == 0 then
        panic('Division by zero')
    end

    return x - x / y * y
end

function fsum(x, y)
    panic('Not implemented')
end

function max(x, y)
    return if x > y then x else y
end

function min(x, y)
    return if x < y then x else y
end

function gcd(x, y)
    var a = max(x, y)
    var b = min(x, y)
    var r = imod(a, b)
      
    while r then
        var a = b
        var b = r
        var r = imod(a, b)
    end
    return b
end


function lcm(x, y)
    var p = x * y
    var n = gcd(x, y)
    return p / n
end


function perm(n, k)
    if k <= n then
        return factorial(n) / factorial(n - k)
    else
        return 0
    end
end

function ldexpr(x, i)
    return x * (2 ^ i)
end

function exp(x)
    return e ^ x
end

function exp2(x)
    return 2 ^ x
end

function cbrt(x)
    return x ^ (1.0 / 3)
end

function pow(x, y)
    return x ^ y
end

function dist(vec1, vec2)
    if len(vec1) != len(vec2) then
        panic('Vectors must have same dimension')
    end
    var s = 0
    for i = 0 to len(vec1) then
        var s = s + (vec1[i] - vec2[i]) ^ 2
    end
    return sqrt(s)
end


function hypot(_coordinates_)
    panic('Not implemented')
end

function product(iter)
    var p = 1
    for o in iter then
        var p = p * o
    end
    return p
end
